/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BillingPlan } from "./BillingPlan";
import { BillingPlanCountArgs } from "./BillingPlanCountArgs";
import { BillingPlanFindManyArgs } from "./BillingPlanFindManyArgs";
import { BillingPlanFindUniqueArgs } from "./BillingPlanFindUniqueArgs";
import { CreateBillingPlanArgs } from "./CreateBillingPlanArgs";
import { UpdateBillingPlanArgs } from "./UpdateBillingPlanArgs";
import { DeleteBillingPlanArgs } from "./DeleteBillingPlanArgs";
import { BillingPlanService } from "../billingPlan.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BillingPlan)
export class BillingPlanResolverBase {
  constructor(
    protected readonly service: BillingPlanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "read",
    possession: "any",
  })
  async _billingPlansMeta(
    @graphql.Args() args: BillingPlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BillingPlan])
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "read",
    possession: "any",
  })
  async billingPlans(
    @graphql.Args() args: BillingPlanFindManyArgs
  ): Promise<BillingPlan[]> {
    return this.service.billingPlans(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BillingPlan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "read",
    possession: "own",
  })
  async billingPlan(
    @graphql.Args() args: BillingPlanFindUniqueArgs
  ): Promise<BillingPlan | null> {
    const result = await this.service.billingPlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillingPlan)
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "create",
    possession: "any",
  })
  async createBillingPlan(
    @graphql.Args() args: CreateBillingPlanArgs
  ): Promise<BillingPlan> {
    return await this.service.createBillingPlan({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillingPlan)
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "update",
    possession: "any",
  })
  async updateBillingPlan(
    @graphql.Args() args: UpdateBillingPlanArgs
  ): Promise<BillingPlan | null> {
    try {
      return await this.service.updateBillingPlan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BillingPlan)
  @nestAccessControl.UseRoles({
    resource: "BillingPlan",
    action: "delete",
    possession: "any",
  })
  async deleteBillingPlan(
    @graphql.Args() args: DeleteBillingPlanArgs
  ): Promise<BillingPlan | null> {
    try {
      return await this.service.deleteBillingPlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
