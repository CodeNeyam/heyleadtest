/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Agent as PrismaAgent } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class AgentServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.AgentCountArgs, "select">): Promise<number> {
    return this.prisma.agent.count(args);
  }

  async agents(args: Prisma.AgentFindManyArgs): Promise<PrismaAgent[]> {
    return this.prisma.agent.findMany(args);
  }
  async agent(args: Prisma.AgentFindUniqueArgs): Promise<PrismaAgent | null> {
    return this.prisma.agent.findUnique(args);
  }
  async createAgent(args: Prisma.AgentCreateArgs): Promise<PrismaAgent> {
    return this.prisma.agent.create(args);
  }
  async updateAgent(args: Prisma.AgentUpdateArgs): Promise<PrismaAgent> {
    return this.prisma.agent.update(args);
  }
  async deleteAgent(args: Prisma.AgentDeleteArgs): Promise<PrismaAgent> {
    return this.prisma.agent.delete(args);
  }

  async uploadImage<T extends Prisma.AgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaAgent> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.agent.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.AgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.agent.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.AgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentFindUniqueArgs>
  ): Promise<PrismaAgent> {
    const { image } = await this.prisma.agent.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.agent.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }
}
